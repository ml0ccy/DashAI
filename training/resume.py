import os
from stable_baselines3 import PPO
from stable_baselines3.common.vec_env import DummyVecEnv, VecTransposeImage, VecFrameStack
from training.callbacks import AutoSaveCallback
from training.window import focus_gd_window


def resume_training(env_class,
                    capture_cfg,
                    model_path="models/gd_live_ppo.zip",
                    total_timesteps=300_000,
                    save_freq=2500,
                    lr=3e-4,
                    n_steps=512,
                    batch_size=128,
                    n_epochs=8,
                    ent_coef=0.008,
                    gamma=0.999,
                    gae_lambda=0.95,
                    clip_range=0.2,
                    vf_coef=0.5,
                    max_grad_norm=0.5,
                    target_kl=0.03):
    """
    –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è PPO –º–æ–¥–µ–ª–∏ –¥–ª—è Geometry Dash.

    env_class ‚Äî –∫–ª–∞—Å—Å –æ–∫—Ä—É–∂–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ envs.gd_env_soft.GeometryDashLiveEnv)
    """
    os.makedirs(os.path.dirname(model_path) or ".", exist_ok=True)

    # –°–æ–∑–¥–∞—ë–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤ —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ –æ–±—ë—Ä—Ç–∫–µ, –∫–∞–∫ –ø—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
    def make_env():
        return env_class(capture=capture_cfg, render_mode=None)

    env = DummyVecEnv([make_env])
    env = VecTransposeImage(env)
    env = VecFrameStack(env, n_stack=4, channels_order="first")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
    if os.path.isfile(model_path):
        print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å –∏–∑ —á–µ–∫–ø–æ–∏–Ω—Ç–∞: {model_path}")
        model = PPO.load(model_path, device="cpu")
        model.set_env(env)
        # –ú–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å LR –ø—Ä—è–º–æ –Ω–∞ –ª–µ—Ç—É
        model.learning_rate = lr
    else:
        print("‚ÑπÔ∏è –ß–µ–∫–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å—Ç–∞—Ä—Ç—É–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å.")
        model = PPO(
            "CnnPolicy",
            env,
            verbose=1,
            device="cpu",
            n_steps=n_steps,
            batch_size=batch_size,
            n_epochs=n_epochs,
            gae_lambda=gae_lambda,
            gamma=gamma,
            ent_coef=ent_coef,
            learning_rate=lr,
            clip_range=clip_range,
            vf_coef=vf_coef,
            max_grad_norm=max_grad_norm,
            target_kl=target_kl,
        )

    focus_gd_window()
    callback = AutoSaveCallback(save_freq=save_freq, save_path=model_path)

    # reset_num_timesteps=False ‚Äî –≤–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    model.learn(total_timesteps=total_timesteps, callback=callback, log_interval=1, reset_num_timesteps=False)
    model.save(model_path)
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –¥–æ–æ–±—É—á–µ–Ω–∏—è: {model_path}")
    env.close()
